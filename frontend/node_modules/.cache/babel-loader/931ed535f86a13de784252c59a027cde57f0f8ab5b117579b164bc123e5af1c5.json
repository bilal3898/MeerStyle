{"ast":null,"code":"import{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext();export function ThemeProvider(_ref){let{children}=_ref;const[theme,setTheme]=useState(()=>{// Check for saved theme or system preference\nconst savedTheme=localStorage.getItem('theme');if(savedTheme)return savedTheme;return window.matchMedia('(prefers-color-scheme: dark)').matches?'dark':'light';});useEffect(()=>{// Apply theme to root element\ndocument.documentElement.classList.remove('light','dark');document.documentElement.classList.add(theme);localStorage.setItem('theme',theme);},[theme]);const toggleTheme=()=>{setTheme(prev=>prev==='dark'?'light':'dark');};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{theme,toggleTheme},children:children});}export const useTheme=()=>{const context=useContext(ThemeContext);if(!context)throw new Error('useTheme must be used within ThemeProvider');return context;};","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsx","_jsx","ThemeContext","ThemeProvider","_ref","children","theme","setTheme","savedTheme","localStorage","getItem","window","matchMedia","matches","document","documentElement","classList","remove","add","setItem","toggleTheme","prev","Provider","value","useTheme","context","Error"],"sources":["/workspace/frontend/src/context/ui/ThemeContext.jsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\n\nconst ThemeContext = createContext();\n\nexport function ThemeProvider({ children }) {\n  const [theme, setTheme] = useState(() => {\n    // Check for saved theme or system preference\n    const savedTheme = localStorage.getItem('theme');\n    if(savedTheme) return savedTheme;\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  });\n\n  useEffect(() => {\n    // Apply theme to root element\n    document.documentElement.classList.remove('light', 'dark');\n    document.documentElement.classList.add(theme);\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'dark' ? 'light' : 'dark');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if(!context) throw new Error('useTheme must be used within ThemeProvider');\n  return context;\n};"],"mappings":"AAAA,OAASA,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEvE,KAAM,CAAAC,YAAY,cAAGN,aAAa,CAAC,CAAC,CAEpC,MAAO,SAAS,CAAAO,aAAaA,CAAAC,IAAA,CAAe,IAAd,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACxC,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGT,QAAQ,CAAC,IAAM,CACvC;AACA,KAAM,CAAAU,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAChD,GAAGF,UAAU,CAAE,MAAO,CAAAA,UAAU,CAChC,MAAO,CAAAG,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,CAAG,MAAM,CAAG,OAAO,CACrF,CAAC,CAAC,CAEFd,SAAS,CAAC,IAAM,CACd;AACAe,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,OAAO,CAAE,MAAM,CAAC,CAC1DH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,GAAG,CAACZ,KAAK,CAAC,CAC7CG,YAAY,CAACU,OAAO,CAAC,OAAO,CAAEb,KAAK,CAAC,CACtC,CAAC,CAAE,CAACA,KAAK,CAAC,CAAC,CAEX,KAAM,CAAAc,WAAW,CAAGA,CAAA,GAAM,CACxBb,QAAQ,CAACc,IAAI,EAAIA,IAAI,GAAK,MAAM,CAAG,OAAO,CAAG,MAAM,CAAC,CACtD,CAAC,CAED,mBACEpB,IAAA,CAACC,YAAY,CAACoB,QAAQ,EAACC,KAAK,CAAE,CAAEjB,KAAK,CAAEc,WAAY,CAAE,CAAAf,QAAA,CAClDA,QAAQ,CACY,CAAC,CAE5B,CAEA,MAAO,MAAM,CAAAmB,QAAQ,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,OAAO,CAAG5B,UAAU,CAACK,YAAY,CAAC,CACxC,GAAG,CAACuB,OAAO,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,4CAA4C,CAAC,CAC1E,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}