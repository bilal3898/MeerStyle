{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"forbidden\", {\n  enumerable: true,\n  get: function () {\n    return forbidden;\n  }\n});\nconst _httpaccessfallback = require(\"./http-access-fallback/http-access-fallback\");\n// TODO: Add `forbidden` docs\n/**\n * @experimental\n * This function allows you to render the [forbidden.js file](https://nextjs.org/docs/app/api-reference/file-conventions/forbidden)\n * within a route segment as well as inject a tag.\n *\n * `forbidden()` can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * Read more: [Next.js Docs: `forbidden`](https://nextjs.org/docs/app/api-reference/functions/forbidden)\n */\nconst DIGEST = \"\" + _httpaccessfallback.HTTP_ERROR_FALLBACK_ERROR_CODE + \";403\";\nfunction forbidden() {\n  if (!process.env.__NEXT_EXPERIMENTAL_AUTH_INTERRUPTS) {\n    throw Object.defineProperty(new Error(\"`forbidden()` is experimental and only allowed to be enabled when `experimental.authInterrupts` is enabled.\"), \"__NEXT_ERROR_CODE\", {\n      value: \"E488\",\n      enumerable: false,\n      configurable: true\n    });\n  }\n  // eslint-disable-next-line no-throw-literal\n  const error = Object.defineProperty(new Error(DIGEST), \"__NEXT_ERROR_CODE\", {\n    value: \"E394\",\n    enumerable: false,\n    configurable: true\n  });\n  error.digest = DIGEST;\n  throw error;\n}\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}","map":{"version":3,"names":["forbidden","DIGEST","_httpaccessfallback","HTTP_ERROR_FALLBACK_ERROR_CODE","process","env","__NEXT_EXPERIMENTAL_AUTH_INTERRUPTS","Object","defineProperty","Error","error","digest"],"sources":["C:\\Users\\DELL\\node_modules\\next\\src\\client\\components\\forbidden.ts"],"sourcesContent":["import {\n  HTTP_ERROR_FALLBACK_ERROR_CODE,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\n\n// TODO: Add `forbidden` docs\n/**\n * @experimental\n * This function allows you to render the [forbidden.js file](https://nextjs.org/docs/app/api-reference/file-conventions/forbidden)\n * within a route segment as well as inject a tag.\n *\n * `forbidden()` can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * Read more: [Next.js Docs: `forbidden`](https://nextjs.org/docs/app/api-reference/functions/forbidden)\n */\n\nconst DIGEST = `${HTTP_ERROR_FALLBACK_ERROR_CODE};403`\n\nexport function forbidden(): never {\n  if (!process.env.__NEXT_EXPERIMENTAL_AUTH_INTERRUPTS) {\n    throw new Error(\n      `\\`forbidden()\\` is experimental and only allowed to be enabled when \\`experimental.authInterrupts\\` is enabled.`\n    )\n  }\n\n  // eslint-disable-next-line no-throw-literal\n  const error = new Error(DIGEST) as HTTPAccessFallbackError\n  ;(error as HTTPAccessFallbackError).digest = DIGEST\n  throw error\n}\n"],"mappings":";;;;;+BAqBgB;;;WAAAA,SAAA;;;oCAlBT;AAEP;AACA;;;;;;;;;;;;AAaA,MAAMC,MAAA,GAAS,EAAC,GAAEC,mBAAA,CAAAC,8BAA8B,GAAC;AAE1C,SAASH,UAAA;EACd,IAAI,CAACI,OAAA,CAAQC,GAAG,CAACC,mCAAmC,EAAE;IACpD,MAAMC,MAAA,CAAAC,cAEL,CAFK,IAAIC,KAAA,CACP,gHADG;aAAA;kBAAA;oBAAA;IAEN;EACF;EAEA;EACA,MAAMC,KAAA,GAAQH,MAAA,CAAAC,cAAiB,CAAjB,IAAIC,KAAA,CAAMR,MAAA,GAAV;WAAA;gBAAA;kBAAA;EAAgB;EAC5BS,KAAA,CAAkCC,MAAM,GAAGV,MAAA;EAC7C,MAAMS,KAAA;AACR","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}