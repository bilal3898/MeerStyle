{"ast":null,"code":"import{createContext,useContext,useState,useCallback}from'react';import{v4 as uuidv4}from'uuid';import{jsx as _jsx}from\"react/jsx-runtime\";const NotificationContext=/*#__PURE__*/createContext();export function NotificationProvider(_ref){let{children}=_ref;const[notifications,setNotifications]=useState([]);const addNotification=useCallback(_ref2=>{let{message,type='info',duration=5000}=_ref2;const id=uuidv4();setNotifications(prev=>[...prev,{id,message,type}]);// Auto-dismiss after duration\nsetTimeout(()=>{removeNotification(id);},duration);},[]);const removeNotification=useCallback(id=>{setNotifications(prev=>prev.filter(n=>n.id!==id));},[]);return/*#__PURE__*/_jsx(NotificationContext.Provider,{value:{notifications,addNotification,removeNotification},children:children});}export const useNotification=()=>{const context=useContext(NotificationContext);if(!context)throw new Error('useNotification must be used within NotificationProvider');return context;};","map":{"version":3,"names":["createContext","useContext","useState","useCallback","v4","uuidv4","jsx","_jsx","NotificationContext","NotificationProvider","_ref","children","notifications","setNotifications","addNotification","_ref2","message","type","duration","id","prev","setTimeout","removeNotification","filter","n","Provider","value","useNotification","context","Error"],"sources":["/workspace/frontend/src/context/ui/NotificationContext.jsx"],"sourcesContent":["import { createContext, useContext, useState, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst NotificationContext = createContext();\n\nexport function NotificationProvider({ children }) {\n  const [notifications, setNotifications] = useState([]);\n\n  const addNotification = useCallback(({ message, type = 'info', duration = 5000 }) => {\n    const id = uuidv4();\n    setNotifications(prev => [...prev, { id, message, type }]);\n    \n    // Auto-dismiss after duration\n    setTimeout(() => {\n      removeNotification(id);\n    }, duration);\n  }, []);\n\n  const removeNotification = useCallback((id) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  }, []);\n\n  return (\n    <NotificationContext.Provider value={{ notifications, addNotification, removeNotification }}>\n      {children}\n    </NotificationContext.Provider>\n  );\n}\n\nexport const useNotification = () => {\n  const context = useContext(NotificationContext);\n  if(!context) throw new Error('useNotification must be used within NotificationProvider');\n  return context;\n};"],"mappings":"AAAA,OAASA,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,WAAW,KAAQ,OAAO,CACxE,OAASC,EAAE,GAAI,CAAAC,MAAM,KAAQ,MAAM,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEpC,KAAM,CAAAC,mBAAmB,cAAGR,aAAa,CAAC,CAAC,CAE3C,MAAO,SAAS,CAAAS,oBAAoBA,CAAAC,IAAA,CAAe,IAAd,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC/C,KAAM,CAACE,aAAa,CAAEC,gBAAgB,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAEtD,KAAM,CAAAY,eAAe,CAAGX,WAAW,CAACY,KAAA,EAAiD,IAAhD,CAAEC,OAAO,CAAEC,IAAI,CAAG,MAAM,CAAEC,QAAQ,CAAG,IAAK,CAAC,CAAAH,KAAA,CAC9E,KAAM,CAAAI,EAAE,CAAGd,MAAM,CAAC,CAAC,CACnBQ,gBAAgB,CAACO,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAE,CAAED,EAAE,CAAEH,OAAO,CAAEC,IAAK,CAAC,CAAC,CAAC,CAE1D;AACAI,UAAU,CAAC,IAAM,CACfC,kBAAkB,CAACH,EAAE,CAAC,CACxB,CAAC,CAAED,QAAQ,CAAC,CACd,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAI,kBAAkB,CAAGnB,WAAW,CAAEgB,EAAE,EAAK,CAC7CN,gBAAgB,CAACO,IAAI,EAAIA,IAAI,CAACG,MAAM,CAACC,CAAC,EAAIA,CAAC,CAACL,EAAE,GAAKA,EAAE,CAAC,CAAC,CACzD,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEZ,IAAA,CAACC,mBAAmB,CAACiB,QAAQ,EAACC,KAAK,CAAE,CAAEd,aAAa,CAAEE,eAAe,CAAEQ,kBAAmB,CAAE,CAAAX,QAAA,CACzFA,QAAQ,CACmB,CAAC,CAEnC,CAEA,MAAO,MAAM,CAAAgB,eAAe,CAAGA,CAAA,GAAM,CACnC,KAAM,CAAAC,OAAO,CAAG3B,UAAU,CAACO,mBAAmB,CAAC,CAC/C,GAAG,CAACoB,OAAO,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,0DAA0D,CAAC,CACxF,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}