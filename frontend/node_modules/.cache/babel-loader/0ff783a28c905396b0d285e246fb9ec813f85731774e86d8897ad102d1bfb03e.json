{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  REDIRECT_ERROR_CODE: null,\n  RedirectType: null,\n  isRedirectError: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  REDIRECT_ERROR_CODE: function () {\n    return REDIRECT_ERROR_CODE;\n  },\n  RedirectType: function () {\n    return RedirectType;\n  },\n  isRedirectError: function () {\n    return isRedirectError;\n  }\n});\nconst _redirectstatuscode = require(\"./redirect-status-code\");\nconst REDIRECT_ERROR_CODE = 'NEXT_REDIRECT';\nvar RedirectType = /*#__PURE__*/function (RedirectType) {\n  RedirectType[\"push\"] = \"push\";\n  RedirectType[\"replace\"] = \"replace\";\n  return RedirectType;\n}({});\nfunction isRedirectError(error) {\n  if (typeof error !== 'object' || error === null || !('digest' in error) || typeof error.digest !== 'string') {\n    return false;\n  }\n  const digest = error.digest.split(';');\n  const [errorCode, type] = digest;\n  const destination = digest.slice(2, -2).join(';');\n  const status = digest.at(-2);\n  const statusCode = Number(status);\n  return errorCode === REDIRECT_ERROR_CODE && (type === 'replace' || type === 'push') && typeof destination === 'string' && !isNaN(statusCode) && statusCode in _redirectstatuscode.RedirectStatusCode;\n}\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}","map":{"version":3,"names":["REDIRECT_ERROR_CODE","RedirectType","isRedirectError","error","digest","split","errorCode","type","destination","slice","join","status","at","statusCode","Number","isNaN","_redirectstatuscode","RedirectStatusCode"],"sources":["C:\\Users\\DELL\\node_modules\\next\\src\\client\\components\\redirect-error.ts"],"sourcesContent":["import { RedirectStatusCode } from './redirect-status-code'\n\nexport const REDIRECT_ERROR_CODE = 'NEXT_REDIRECT'\n\nexport enum RedirectType {\n  push = 'push',\n  replace = 'replace',\n}\n\nexport type RedirectError = Error & {\n  digest: `${typeof REDIRECT_ERROR_CODE};${RedirectType};${string};${RedirectStatusCode};`\n}\n\n/**\n * Checks an error to determine if it's an error generated by the\n * `redirect(url)` helper.\n *\n * @param error the error that may reference a redirect error\n * @returns true if the error is a redirect error\n */\nexport function isRedirectError(error: unknown): error is RedirectError {\n  if (\n    typeof error !== 'object' ||\n    error === null ||\n    !('digest' in error) ||\n    typeof error.digest !== 'string'\n  ) {\n    return false\n  }\n\n  const digest = error.digest.split(';')\n  const [errorCode, type] = digest\n  const destination = digest.slice(2, -2).join(';')\n  const status = digest.at(-2)\n\n  const statusCode = Number(status)\n\n  return (\n    errorCode === REDIRECT_ERROR_CODE &&\n    (type === 'replace' || type === 'push') &&\n    typeof destination === 'string' &&\n    !isNaN(statusCode) &&\n    statusCode in RedirectStatusCode\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;EAEaA,mBAAmB,WAAAA,CAAA;WAAnBA,mBAAA;;EAEDC,YAAY,WAAAA,CAAA;WAAZA,YAAA;;EAgBIC,eAAe,WAAAA,CAAA;WAAfA,eAAA;;;oCApBmB;AAE5B,MAAMF,mBAAA,GAAsB;AAE5B,IAAAC,YAAK,0BAAAA,YAAA;;;SAAAA,YAAA;;AAgBL,SAASC,gBAAgBC,KAAc;EAC5C,IACE,OAAOA,KAAA,KAAU,YACjBA,KAAA,KAAU,QACV,EAAE,YAAYA,KAAI,KAClB,OAAOA,KAAA,CAAMC,MAAM,KAAK,UACxB;IACA,OAAO;EACT;EAEA,MAAMA,MAAA,GAASD,KAAA,CAAMC,MAAM,CAACC,KAAK,CAAC;EAClC,MAAM,CAACC,SAAA,EAAWC,IAAA,CAAK,GAAGH,MAAA;EAC1B,MAAMI,WAAA,GAAcJ,MAAA,CAAOK,KAAK,CAAC,GAAG,CAAC,GAAGC,IAAI,CAAC;EAC7C,MAAMC,MAAA,GAASP,MAAA,CAAOQ,EAAE,CAAC,CAAC;EAE1B,MAAMC,UAAA,GAAaC,MAAA,CAAOH,MAAA;EAE1B,OACEL,SAAA,KAAcN,mBAAA,KACbO,IAAA,KAAS,aAAaA,IAAA,KAAS,MAAK,KACrC,OAAOC,WAAA,KAAgB,YACvB,CAACO,KAAA,CAAMF,UAAA,KACPA,UAAA,IAAcG,mBAAA,CAAAC,kBAAkB;AAEpC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}