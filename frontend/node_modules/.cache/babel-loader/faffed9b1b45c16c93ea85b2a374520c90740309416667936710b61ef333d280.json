{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  getRedirectError: null,\n  getRedirectStatusCodeFromError: null,\n  getRedirectTypeFromError: null,\n  getURLFromRedirectError: null,\n  permanentRedirect: null,\n  redirect: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  getRedirectError: function () {\n    return getRedirectError;\n  },\n  getRedirectStatusCodeFromError: function () {\n    return getRedirectStatusCodeFromError;\n  },\n  getRedirectTypeFromError: function () {\n    return getRedirectTypeFromError;\n  },\n  getURLFromRedirectError: function () {\n    return getURLFromRedirectError;\n  },\n  permanentRedirect: function () {\n    return permanentRedirect;\n  },\n  redirect: function () {\n    return redirect;\n  }\n});\nconst _redirectstatuscode = require(\"./redirect-status-code\");\nconst _redirecterror = require(\"./redirect-error\");\nconst actionAsyncStorage = typeof window === 'undefined' ? require('../../server/app-render/action-async-storage.external').actionAsyncStorage : undefined;\nfunction getRedirectError(url, type, statusCode) {\n  if (statusCode === void 0) statusCode = _redirectstatuscode.RedirectStatusCode.TemporaryRedirect;\n  const error = Object.defineProperty(new Error(_redirecterror.REDIRECT_ERROR_CODE), \"__NEXT_ERROR_CODE\", {\n    value: \"E394\",\n    enumerable: false,\n    configurable: true\n  });\n  error.digest = _redirecterror.REDIRECT_ERROR_CODE + \";\" + type + \";\" + url + \";\" + statusCode + \";\";\n  return error;\n}\nfunction redirect(/** The URL to redirect to */url, type) {\n  var _actionAsyncStorage_getStore;\n  type != null ? type : type = (actionAsyncStorage == null ? void 0 : (_actionAsyncStorage_getStore = actionAsyncStorage.getStore()) == null ? void 0 : _actionAsyncStorage_getStore.isAction) ? _redirecterror.RedirectType.push : _redirecterror.RedirectType.replace;\n  throw getRedirectError(url, type, _redirectstatuscode.RedirectStatusCode.TemporaryRedirect);\n}\nfunction permanentRedirect(/** The URL to redirect to */url, type) {\n  if (type === void 0) type = _redirecterror.RedirectType.replace;\n  throw getRedirectError(url, type, _redirectstatuscode.RedirectStatusCode.PermanentRedirect);\n}\nfunction getURLFromRedirectError(error) {\n  if (!(0, _redirecterror.isRedirectError)(error)) return null;\n  // Slices off the beginning of the digest that contains the code and the\n  // separating ';'.\n  return error.digest.split(';').slice(2, -2).join(';');\n}\nfunction getRedirectTypeFromError(error) {\n  if (!(0, _redirecterror.isRedirectError)(error)) {\n    throw Object.defineProperty(new Error('Not a redirect error'), \"__NEXT_ERROR_CODE\", {\n      value: \"E260\",\n      enumerable: false,\n      configurable: true\n    });\n  }\n  return error.digest.split(';', 2)[1];\n}\nfunction getRedirectStatusCodeFromError(error) {\n  if (!(0, _redirecterror.isRedirectError)(error)) {\n    throw Object.defineProperty(new Error('Not a redirect error'), \"__NEXT_ERROR_CODE\", {\n      value: \"E260\",\n      enumerable: false,\n      configurable: true\n    });\n  }\n  return Number(error.digest.split(';').at(-2));\n}\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}","map":{"version":3,"names":["getRedirectError","getRedirectStatusCodeFromError","getRedirectTypeFromError","getURLFromRedirectError","permanentRedirect","redirect","actionAsyncStorage","window","require","undefined","url","type","statusCode","_redirectstatuscode","RedirectStatusCode","TemporaryRedirect","error","Object","defineProperty","Error","_redirecterror","REDIRECT_ERROR_CODE","digest","_actionAsyncStorage_getStore","getStore","isAction","RedirectType","push","replace","PermanentRedirect","isRedirectError","split","slice","join","Number","at"],"sources":["C:\\Users\\DELL\\node_modules\\next\\src\\client\\components\\redirect.ts"],"sourcesContent":["import { RedirectStatusCode } from './redirect-status-code'\nimport {\n  RedirectType,\n  type RedirectError,\n  isRedirectError,\n  REDIRECT_ERROR_CODE,\n} from './redirect-error'\n\nconst actionAsyncStorage =\n  typeof window === 'undefined'\n    ? (\n        require('../../server/app-render/action-async-storage.external') as typeof import('../../server/app-render/action-async-storage.external')\n      ).actionAsyncStorage\n    : undefined\n\nexport function getRedirectError(\n  url: string,\n  type: RedirectType,\n  statusCode: RedirectStatusCode = RedirectStatusCode.TemporaryRedirect\n): RedirectError {\n  const error = new Error(REDIRECT_ERROR_CODE) as RedirectError\n  error.digest = `${REDIRECT_ERROR_CODE};${type};${url};${statusCode};`\n  return error\n}\n\n/**\n * This function allows you to redirect the user to another URL. It can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a meta tag to redirect the user to the target page.\n * - In a Route Handler or Server Action, it will serve a 307/303 to the caller.\n * - In a Server Action, type defaults to 'push' and 'replace' elsewhere.\n *\n * Read more: [Next.js Docs: `redirect`](https://nextjs.org/docs/app/api-reference/functions/redirect)\n */\nexport function redirect(\n  /** The URL to redirect to */\n  url: string,\n  type?: RedirectType\n): never {\n  type ??= actionAsyncStorage?.getStore()?.isAction\n    ? RedirectType.push\n    : RedirectType.replace\n\n  throw getRedirectError(url, type, RedirectStatusCode.TemporaryRedirect)\n}\n\n/**\n * This function allows you to redirect the user to another URL. It can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a meta tag to redirect the user to the target page.\n * - In a Route Handler or Server Action, it will serve a 308/303 to the caller.\n *\n * Read more: [Next.js Docs: `redirect`](https://nextjs.org/docs/app/api-reference/functions/redirect)\n */\nexport function permanentRedirect(\n  /** The URL to redirect to */\n  url: string,\n  type: RedirectType = RedirectType.replace\n): never {\n  throw getRedirectError(url, type, RedirectStatusCode.PermanentRedirect)\n}\n\n/**\n * Returns the encoded URL from the error if it's a RedirectError, null\n * otherwise. Note that this does not validate the URL returned.\n *\n * @param error the error that may be a redirect error\n * @return the url if the error was a redirect error\n */\nexport function getURLFromRedirectError(error: RedirectError): string\nexport function getURLFromRedirectError(error: unknown): string | null {\n  if (!isRedirectError(error)) return null\n\n  // Slices off the beginning of the digest that contains the code and the\n  // separating ';'.\n  return error.digest.split(';').slice(2, -2).join(';')\n}\n\nexport function getRedirectTypeFromError(error: RedirectError): RedirectType {\n  if (!isRedirectError(error)) {\n    throw new Error('Not a redirect error')\n  }\n\n  return error.digest.split(';', 2)[1] as RedirectType\n}\n\nexport function getRedirectStatusCodeFromError(error: RedirectError): number {\n  if (!isRedirectError(error)) {\n    throw new Error('Not a redirect error')\n  }\n\n  return Number(error.digest.split(';').at(-2))\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;EAegBA,gBAAgB,WAAAA,CAAA;WAAhBA,gBAAA;;EA6EAC,8BAA8B,WAAAA,CAAA;WAA9BA,8BAAA;;EARAC,wBAAwB,WAAAA,CAAA;WAAxBA,wBAAA;;EARAC,uBAAuB,WAAAA,CAAA;WAAvBA,uBAAA;;EAhBAC,iBAAiB,WAAAA,CAAA;WAAjBA,iBAAA;;EAvBAC,QAAQ,WAAAA,CAAA;WAARA,QAAA;;;oCArCmB;+BAM5B;AAEP,MAAMC,kBAAA,GACJ,OAAOC,MAAA,KAAW,cACdC,OACE,CAAQ,yDACRF,kBAAkB,GACpBG,SAAA;AAEC,SAAST,iBACdU,GAAW,EACXC,IAAkB,EAClBC,UAAqE;EAArE,IAAAA,UAAA,aAAAA,UAAA,GAAiCC,mBAAA,CAAAC,kBAAkB,CAACC,iBAAiB;EAErE,MAAMC,KAAA,GAAQC,MAAA,CAAAC,cAA8B,CAA9B,IAAIC,KAAA,CAAMC,cAAA,CAAAC,mBAAmB,GAA7B;WAAA;gBAAA;kBAAA;EAA6B;EAC3CL,KAAA,CAAMM,MAAM,GAAGF,cAAG,CAAAC,mBAAmB,GAAC,MAAGV,IAAA,GAAK,MAAGD,GAAA,GAAI,MAAGE,UAAA,GAAW;EACnE,OAAOI,KAAA;AACT;AAcO,SAASX,SACd,6BACAK,GAAW,EACXC,IAAmB;MAEVY,4BAAA;EAATZ,IAAA,WAAAA,IAAA,GAAAA,IAAA,GAAS,CAAAL,kBAAA,qBAAAiB,4BAAA,GAAAjB,kBAAA,CAAoBkB,QAAQ,uBAA5BD,4BAAA,CAAgCE,QAAQ,IAC7CL,cAAA,CAAAM,YAAY,CAACC,IAAI,GACjBP,cAAA,CAAAM,YAAY,CAACE,OAAO;EAExB,MAAM5B,gBAAA,CAAiBU,GAAA,EAAKC,IAAA,EAAME,mBAAA,CAAAC,kBAAkB,CAACC,iBAAiB;AACxE;AAaO,SAASX,kBACd,6BACAM,GAAW,EACXC,IAAyC;EAAzC,IAAAA,IAAA,aAAAA,IAAA,GAAqBS,cAAA,CAAAM,YAAY,CAACE,OAAO;EAEzC,MAAM5B,gBAAA,CAAiBU,GAAA,EAAKC,IAAA,EAAME,mBAAA,CAAAC,kBAAkB,CAACe,iBAAiB;AACxE;AAUO,SAAS1B,wBAAwBa,KAAc;EACpD,IAAI,CAAC,IAAAI,cAAA,CAAAU,eAAe,EAACd,KAAA,GAAQ,OAAO;EAEpC;EACA;EACA,OAAOA,KAAA,CAAMM,MAAM,CAACS,KAAK,CAAC,KAAKC,KAAK,CAAC,GAAG,CAAC,GAAGC,IAAI,CAAC;AACnD;AAEO,SAAS/B,yBAAyBc,KAAoB;EAC3D,IAAI,CAAC,IAAAI,cAAA,CAAAU,eAAe,EAACd,KAAA,GAAQ;IAC3B,MAAMC,MAAA,CAAAC,cAAiC,CAAjC,IAAIC,KAAA,CAAM,yBAAV;aAAA;kBAAA;oBAAA;IAAgC;EACxC;EAEA,OAAOH,KAAA,CAAMM,MAAM,CAACS,KAAK,CAAC,KAAK,EAAE,CAAC,EAAE;AACtC;AAEO,SAAS9B,+BAA+Be,KAAoB;EACjE,IAAI,CAAC,IAAAI,cAAA,CAAAU,eAAe,EAACd,KAAA,GAAQ;IAC3B,MAAMC,MAAA,CAAAC,cAAiC,CAAjC,IAAIC,KAAA,CAAM,yBAAV;aAAA;kBAAA;oBAAA;IAAgC;EACxC;EAEA,OAAOe,MAAA,CAAOlB,KAAA,CAAMM,MAAM,CAACS,KAAK,CAAC,KAAKI,EAAE,CAAC,CAAC;AAC5C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}